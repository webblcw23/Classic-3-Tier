trigger:
  none

pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDir: 'Terraform/'
  backendKey: 'movieexplorer-prod.tfstate'
  resourceGroup: 'movie-explorer-rg'
  storageAccount: 'lewisfuncstorage'
  containerName: 'tfstate'
  # These will be securely set in the pipeline UI or variable group
  subscription_id: '$(subscription_id)'
  sql_admin_username: '$(sql_admin_username)'
  sql_admin_password: '$(sql_admin_password)'

stages:
- stage: DeployInfra
  displayName: "Terraform Apply Stage"
  jobs:
  - job: ApplyInfra
    displayName: "Run Terraform Apply"
    steps:

    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: ${{ variables.workingDir }}
        backendServiceArm: 'ADOToSubscription'
        backendAzureRmResourceGroupName: ${{ variables.resourceGroup }}
        backendAzureRmStorageAccountName: ${{ variables.storageAccount }}
        backendAzureRmContainerName: ${{ variables.containerName }}
        backendAzureRmKey: ${{ variables.backendKey }}
        commandOptions: '-reconfigure -upgrade'

    - task: TerraformTaskV4@4
      displayName: "Terraform Validate"
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: ${{ variables.workingDir }}

    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'ADOToSubscription'
        workingDirectory: ${{ variables.workingDir }}
        commandOptions: >
          -var subscription_id=${{ variables.subscription_id }}
          -var sql_admin_username=${{ variables.sql_admin_username }}
          -var sql_admin_password=${{ variables.sql_admin_password }}

    - task: TerraformTaskV4@4
      displayName: "Terraform Apply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'ADOToSubscription'
        workingDirectory: ${{ variables.workingDir }}
        commandOptions: >
          -auto-approve
          -var subscription_id=${{ variables.subscription_id }}
          -var sql_admin_username=${{ variables.sql_admin_username }}
          -var sql_admin_password=${{ variables.sql_admin_password }}
    - script: echo "Terrafom Apply Complete"
